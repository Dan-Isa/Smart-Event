rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // HELPER FUNCTIONS
    // ============================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Get user data from request
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Check if user belongs to institution
    function belongsToInstitution(institution) {
      return isAuthenticated() && getUserData().institution == institution;
    }
    
    // Check if user has specific role
    function hasRole(role) {
      return isAuthenticated() && getUserData().role == role;
    }
    
    // Check if user is admin
    function isAdmin() {
      return hasRole('admin');
    }
    
    // Check if user is lecturer
    function isLecturer() {
      return hasRole('lecturer');
    }
    
    // Check if user is student
    function isStudent() {
      return hasRole('student');
    }
    
    // Check if user owns the resource
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Check if user is creator of event
    function isEventCreator(eventData) {
      return request.auth.uid == eventData.creatorId;
    }
    
    // ============================================
    // USERS COLLECTION
    // ============================================
    
    match /users/{userId} {
      // Users can read their own document
      allow read: if isAuthenticated() && isOwner(userId);
      
      // Admins can read users in their institution
      allow read: if isAdmin() && belongsToInstitution(resource.data.institution);
      
      // Users can update their own profile (except role and institution)
      allow update: if isAuthenticated() 
        && isOwner(userId)
        && request.resource.data.role == resource.data.role
        && request.resource.data.institution == resource.data.institution
        && request.resource.data.email == resource.data.email;
      
      // Only admins can create users in their institution
      allow create: if isAdmin() 
        && request.resource.data.institution == getUserData().institution;
      
      // Only admins can delete users (but not themselves)
      allow delete: if isAdmin() 
        && !isOwner(userId)
        && belongsToInstitution(resource.data.institution);
    }
    
    // ============================================
    // EVENTS COLLECTION
    // ============================================
    
    match /events/{eventId} {
      // All authenticated users can read events in their institution
      allow read: if isAuthenticated() 
        && belongsToInstitution(resource.data.institution);
      
      // Admins and lecturers can create events
      allow create: if isAuthenticated() 
        && (isAdmin() || isLecturer())
        && request.resource.data.institution == getUserData().institution
        && request.resource.data.creatorId == request.auth.uid;
      
      // Only event creator or admin can update
      allow update: if isAuthenticated() 
        && belongsToInstitution(resource.data.institution)
        && (isEventCreator(resource.data) || isAdmin());
      
      // Only event creator or admin can delete
      allow delete: if isAuthenticated() 
        && belongsToInstitution(resource.data.institution)
        && (isEventCreator(resource.data) || isAdmin());
    }
    
    // ============================================
    // NOTIFICATIONS COLLECTION
    // ============================================
    
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      allow read: if isAuthenticated() 
        && isOwner(resource.data.userId);
      
      // System can create notifications (via Cloud Functions)
      allow create: if isAuthenticated();
      
      // Users can update their own notifications (mark as read)
      allow update: if isAuthenticated() 
        && isOwner(resource.data.userId)
        && request.resource.data.userId == resource.data.userId;
      
      // Users can delete their own notifications
      allow delete: if isAuthenticated() 
        && isOwner(resource.data.userId);
    }
    
    // ============================================
    // INSTITUTIONS COLLECTION (Optional for future)
    // ============================================
    
    match /institutions/{institutionId} {
      // All authenticated users can read their institution
      allow read: if isAuthenticated() 
        && getUserData().institution == institutionId;
      
      // Only system admins can create/update/delete institutions
      allow write: if false; // Managed via admin SDK or console
    }
    
    // ============================================
    // DEFAULT DENY ALL
    // ============================================
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}